
FROM python:3.9-slim

WORKDIR /app

# Copy only requirements first to leverage Docker cache
COPY requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY sample_flask_kubernetes_api.py app.py

# Generate self-signed certificate for development (in production, use proper certificates)
RUN apt-get update && apt-get install -y openssl && \
    openssl req -x509 -newkey rsa:4096 -nodes -out cert.pem -keyout key.pem -days 365 \
    -subj "/C=US/ST=California/L=San Francisco/O=AI Assistant/CN=localhost" \
    -addext "subjectAltName = DNS:localhost,DNS:ai-assistant-api,IP:127.0.0.1" && \
    chmod 600 key.pem

# Create a non-root user and switch to it
RUN adduser --disabled-password --gecos '' appuser
RUN chown -R appuser:appuser /app
USER appuser

# Expose the port the app runs on
EXPOSE 8000

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    HTTPS_ENABLED=0 \
    GITHUB_CLIENT_ID="your-real-github-client-id" \
    GITHUB_CLIENT_SECRET="your-real-github-client-secret" \
    GITHUB_REDIRECT_URI="http://localhost:8000/api/auth/github/callback" \
    FRONTEND_URL="http://localhost:5173"

# Command to run the application with Gunicorn
# - workers: 2 worker processes (adjust based on available CPU cores)
# - timeout: 120 seconds for long-running requests
# - bind: listening on all interfaces, port 8000
CMD ["gunicorn", "--workers=2", "--timeout=120", "--bind=0.0.0.0:8000", "app:app"]
